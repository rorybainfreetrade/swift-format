### Swift dependencies file v0 ###
provides-top-level:
provides-nominal:
provides-member:
- ["11SwiftSyntax012SequenceExprB0V", ""]
- ["11SwiftSyntax012SequenceExprB0V", "folded"]
provides-dynamic-lookup:
depends-top-level:
- !private "!"
- !private "!="
- !private "!=="
- !private "&"
- !private "&&"
- !private "..."
- !private "=="
- !private "==="
- !private ">"
- "ArraySlice"
- !private "AsExprSyntax"
- "AssignmentPrecedence"
- !private "Associativity"
- "Bool"
- !private "BooleanLiteralType"
- "ExprSyntax"
- !private "FloatLiteralType"
- !private "IntegerLiteralType"
- !private "IsExprSyntax"
- "OperatorAndPrecedence"
- "OperatorContext"
- !private "PrecedenceBound"
- "PrecedenceGroup"
- "SequenceExprSyntax"
- !private "StringLiteralType"
- !private "Syntax"
- !private "SyntaxEnum"
- !private "SyntaxFactory"
- !private "TernaryExprSyntax"
- !private "TryExprSyntax"
- !private "assert"
- !private "precondition"
- !private "preconditionFailure"
- !private "||"
- !private "~="
depends-member:
- !private ["Sa", "append"]
- !private ["Sa", "count"]
- !private ["Sa", "subscript"]
- !private ["s10ArraySliceV", "count"]
- !private ["s10ArraySliceV", "dropFirst"]
- !private ["s10ArraySliceV", "first"]
- !private ["s10ArraySliceV", "index"]
- !private ["s10ArraySliceV", "isEmpty"]
- !private ["s10ArraySliceV", "startIndex"]
- !private ["s10ArraySliceV", "subscript"]
- !private ["22SwiftFormatPrettyPrint13AssociativityO", "deinit"]
- !private ["22SwiftFormatPrettyPrint13AssociativityO", "left"]
- !private ["22SwiftFormatPrettyPrint13AssociativityO", "right"]
- !private ["SK", "append"]
- !private ["SK", "contains"]
- !private ["SK", "count"]
- !private ["SK", "dropFirst"]
- !private ["SK", "first"]
- !private ["SK", "index"]
- !private ["SK", "isEmpty"]
- !private ["SK", "makeIterator"]
- !private ["SK", "reduce"]
- !private ["SK", "startIndex"]
- !private ["SK", "subscript"]
- !private ["11SwiftSyntax018BinaryOperatorExprB0V", "operatorToken"]
- !private ["s7CVarArgP", "append"]
- !private ["s7CVarArgP", "count"]
- !private ["s7CVarArgP", "subscript"]
- !private ["Sl", "append"]
- !private ["Sl", "contains"]
- !private ["Sl", "count"]
- !private ["Sl", "dropFirst"]
- !private ["Sl", "first"]
- !private ["Sl", "index"]
- !private ["Sl", "isEmpty"]
- !private ["Sl", "makeIterator"]
- !private ["Sl", "reduce"]
- !private ["Sl", "startIndex"]
- !private ["Sl", "subscript"]
- !private ["10Foundation15ContiguousBytesP", "append"]
- !private ["10Foundation15ContiguousBytesP", "count"]
- !private ["10Foundation15ContiguousBytesP", "dropFirst"]
- !private ["10Foundation15ContiguousBytesP", "first"]
- !private ["10Foundation15ContiguousBytesP", "index"]
- !private ["10Foundation15ContiguousBytesP", "isEmpty"]
- !private ["10Foundation15ContiguousBytesP", "startIndex"]
- !private ["10Foundation15ContiguousBytesP", "subscript"]
- !private ["s28CustomDebugStringConvertibleP", "AsExprSyntax"]
- !private ["s28CustomDebugStringConvertibleP", "ExprSyntax"]
- !private ["s28CustomDebugStringConvertibleP", "IsExprSyntax"]
- !private ["s28CustomDebugStringConvertibleP", "OperatorAndPrecedence"]
- !private ["s28CustomDebugStringConvertibleP", "PrecedenceBound"]
- !private ["s28CustomDebugStringConvertibleP", "Syntax"]
- !private ["s28CustomDebugStringConvertibleP", "SyntaxEnum"]
- !private ["s28CustomDebugStringConvertibleP", "SyntaxFactory"]
- !private ["s28CustomDebugStringConvertibleP", "TernaryExprSyntax"]
- !private ["s28CustomDebugStringConvertibleP", "TryExprSyntax"]
- !private ["s28CustomDebugStringConvertibleP", "append"]
- !private ["s28CustomDebugStringConvertibleP", "as"]
- !private ["s28CustomDebugStringConvertibleP", "assert"]
- !private ["s28CustomDebugStringConvertibleP", "conditionExpression"]
- !private ["s28CustomDebugStringConvertibleP", "contains"]
- !private ["s28CustomDebugStringConvertibleP", "count"]
- !private ["s28CustomDebugStringConvertibleP", "dropFirst"]
- !private ["s28CustomDebugStringConvertibleP", "elements"]
- !private ["s28CustomDebugStringConvertibleP", "expression"]
- !private ["s28CustomDebugStringConvertibleP", "first"]
- !private ["s28CustomDebugStringConvertibleP", "foldSequence"]
- !private ["s28CustomDebugStringConvertibleP", "index"]
- !private ["s28CustomDebugStringConvertibleP", "init"]
- !private ["s28CustomDebugStringConvertibleP", "is"]
- !private ["s28CustomDebugStringConvertibleP", "isEmpty"]
- !private ["s28CustomDebugStringConvertibleP", "left"]
- !private ["s28CustomDebugStringConvertibleP", "makeExpression"]
- !private ["s28CustomDebugStringConvertibleP", "makeIterator"]
- !private ["s28CustomDebugStringConvertibleP", "mayChangeByFolding"]
- !private ["s28CustomDebugStringConvertibleP", "none"]
- !private ["s28CustomDebugStringConvertibleP", "normalizeExpression"]
- !private ["s28CustomDebugStringConvertibleP", "operatorToken"]
- !private ["s28CustomDebugStringConvertibleP", "peekNextOperator"]
- !private ["s28CustomDebugStringConvertibleP", "precedenceGroup"]
- !private ["s28CustomDebugStringConvertibleP", "precondition"]
- !private ["s28CustomDebugStringConvertibleP", "preconditionFailure"]
- !private ["s28CustomDebugStringConvertibleP", "reduce"]
- !private ["s28CustomDebugStringConvertibleP", "rhsExpr"]
- !private ["s28CustomDebugStringConvertibleP", "right"]
- !private ["s28CustomDebugStringConvertibleP", "secondChoice"]
- !private ["s28CustomDebugStringConvertibleP", "startIndex"]
- !private ["s28CustomDebugStringConvertibleP", "subscript"]
- !private ["s28CustomDebugStringConvertibleP", "text"]
- !private ["s28CustomDebugStringConvertibleP", "withConditionExpression"]
- !private ["s28CustomDebugStringConvertibleP", "withExpression"]
- !private ["s28CustomDebugStringConvertibleP", "withSecondChoice"]
- !private ["s17CustomReflectableP", "AsExprSyntax"]
- !private ["s17CustomReflectableP", "ExprSyntax"]
- !private ["s17CustomReflectableP", "IsExprSyntax"]
- !private ["s17CustomReflectableP", "OperatorAndPrecedence"]
- !private ["s17CustomReflectableP", "PrecedenceBound"]
- !private ["s17CustomReflectableP", "Syntax"]
- !private ["s17CustomReflectableP", "SyntaxEnum"]
- !private ["s17CustomReflectableP", "SyntaxFactory"]
- !private ["s17CustomReflectableP", "TernaryExprSyntax"]
- !private ["s17CustomReflectableP", "TryExprSyntax"]
- !private ["s17CustomReflectableP", "append"]
- !private ["s17CustomReflectableP", "as"]
- !private ["s17CustomReflectableP", "assert"]
- !private ["s17CustomReflectableP", "conditionExpression"]
- !private ["s17CustomReflectableP", "contains"]
- !private ["s17CustomReflectableP", "count"]
- !private ["s17CustomReflectableP", "dropFirst"]
- !private ["s17CustomReflectableP", "elements"]
- !private ["s17CustomReflectableP", "expression"]
- !private ["s17CustomReflectableP", "first"]
- !private ["s17CustomReflectableP", "foldSequence"]
- !private ["s17CustomReflectableP", "index"]
- !private ["s17CustomReflectableP", "init"]
- !private ["s17CustomReflectableP", "is"]
- !private ["s17CustomReflectableP", "isEmpty"]
- !private ["s17CustomReflectableP", "left"]
- !private ["s17CustomReflectableP", "makeExpression"]
- !private ["s17CustomReflectableP", "makeIterator"]
- !private ["s17CustomReflectableP", "mayChangeByFolding"]
- !private ["s17CustomReflectableP", "none"]
- !private ["s17CustomReflectableP", "normalizeExpression"]
- !private ["s17CustomReflectableP", "operatorToken"]
- !private ["s17CustomReflectableP", "peekNextOperator"]
- !private ["s17CustomReflectableP", "precedenceGroup"]
- !private ["s17CustomReflectableP", "precondition"]
- !private ["s17CustomReflectableP", "preconditionFailure"]
- !private ["s17CustomReflectableP", "reduce"]
- !private ["s17CustomReflectableP", "rhsExpr"]
- !private ["s17CustomReflectableP", "right"]
- !private ["s17CustomReflectableP", "secondChoice"]
- !private ["s17CustomReflectableP", "startIndex"]
- !private ["s17CustomReflectableP", "subscript"]
- !private ["s17CustomReflectableP", "text"]
- !private ["s17CustomReflectableP", "withConditionExpression"]
- !private ["s17CustomReflectableP", "withExpression"]
- !private ["s17CustomReflectableP", "withSecondChoice"]
- !private ["s23CustomStringConvertibleP", "AsExprSyntax"]
- !private ["s23CustomStringConvertibleP", "ExprSyntax"]
- !private ["s23CustomStringConvertibleP", "IsExprSyntax"]
- !private ["s23CustomStringConvertibleP", "OperatorAndPrecedence"]
- !private ["s23CustomStringConvertibleP", "PrecedenceBound"]
- !private ["s23CustomStringConvertibleP", "Syntax"]
- !private ["s23CustomStringConvertibleP", "SyntaxEnum"]
- !private ["s23CustomStringConvertibleP", "SyntaxFactory"]
- !private ["s23CustomStringConvertibleP", "TernaryExprSyntax"]
- !private ["s23CustomStringConvertibleP", "TryExprSyntax"]
- !private ["s23CustomStringConvertibleP", "append"]
- !private ["s23CustomStringConvertibleP", "as"]
- !private ["s23CustomStringConvertibleP", "assert"]
- !private ["s23CustomStringConvertibleP", "conditionExpression"]
- !private ["s23CustomStringConvertibleP", "contains"]
- !private ["s23CustomStringConvertibleP", "count"]
- !private ["s23CustomStringConvertibleP", "dropFirst"]
- !private ["s23CustomStringConvertibleP", "elements"]
- !private ["s23CustomStringConvertibleP", "expression"]
- !private ["s23CustomStringConvertibleP", "first"]
- !private ["s23CustomStringConvertibleP", "foldSequence"]
- !private ["s23CustomStringConvertibleP", "index"]
- !private ["s23CustomStringConvertibleP", "init"]
- !private ["s23CustomStringConvertibleP", "is"]
- !private ["s23CustomStringConvertibleP", "isEmpty"]
- !private ["s23CustomStringConvertibleP", "makeExpression"]
- !private ["s23CustomStringConvertibleP", "makeIterator"]
- !private ["s23CustomStringConvertibleP", "mayChangeByFolding"]
- !private ["s23CustomStringConvertibleP", "normalizeExpression"]
- !private ["s23CustomStringConvertibleP", "operatorToken"]
- !private ["s23CustomStringConvertibleP", "peekNextOperator"]
- !private ["s23CustomStringConvertibleP", "precedenceGroup"]
- !private ["s23CustomStringConvertibleP", "precondition"]
- !private ["s23CustomStringConvertibleP", "preconditionFailure"]
- !private ["s23CustomStringConvertibleP", "reduce"]
- !private ["s23CustomStringConvertibleP", "rhsExpr"]
- !private ["s23CustomStringConvertibleP", "secondChoice"]
- !private ["s23CustomStringConvertibleP", "startIndex"]
- !private ["s23CustomStringConvertibleP", "subscript"]
- !private ["s23CustomStringConvertibleP", "text"]
- !private ["s23CustomStringConvertibleP", "withConditionExpression"]
- !private ["s23CustomStringConvertibleP", "withExpression"]
- !private ["s23CustomStringConvertibleP", "withSecondChoice"]
- !private ["10Foundation12DataProtocolP", "append"]
- !private ["10Foundation12DataProtocolP", "count"]
- !private ["10Foundation12DataProtocolP", "dropFirst"]
- !private ["10Foundation12DataProtocolP", "first"]
- !private ["10Foundation12DataProtocolP", "index"]
- !private ["10Foundation12DataProtocolP", "isEmpty"]
- !private ["10Foundation12DataProtocolP", "startIndex"]
- !private ["10Foundation12DataProtocolP", "subscript"]
- !private ["Se", "append"]
- !private ["Se", "count"]
- !private ["Se", "left"]
- !private ["Se", "none"]
- !private ["Se", "right"]
- !private ["Se", "subscript"]
- !private ["SE", "append"]
- !private ["SE", "count"]
- !private ["SE", "left"]
- !private ["SE", "none"]
- !private ["SE", "right"]
- !private ["SE", "subscript"]
- !private ["SQ", "AsExprSyntax"]
- !private ["SQ", "ExprSyntax"]
- !private ["SQ", "IsExprSyntax"]
- !private ["SQ", "OperatorAndPrecedence"]
- !private ["SQ", "PrecedenceBound"]
- !private ["SQ", "Syntax"]
- !private ["SQ", "SyntaxEnum"]
- !private ["SQ", "SyntaxFactory"]
- !private ["SQ", "TernaryExprSyntax"]
- !private ["SQ", "TryExprSyntax"]
- !private ["SQ", "append"]
- !private ["SQ", "as"]
- !private ["SQ", "assert"]
- !private ["SQ", "assignment"]
- !private ["SQ", "casting"]
- !private ["SQ", "conditionExpression"]
- !private ["SQ", "contains"]
- !private ["SQ", "count"]
- !private ["SQ", "dropFirst"]
- !private ["SQ", "elements"]
- !private ["SQ", "expression"]
- !private ["SQ", "first"]
- !private ["SQ", "foldSequence"]
- !private ["SQ", "functionArrow"]
- !private ["SQ", "index"]
- !private ["SQ", "init"]
- !private ["SQ", "is"]
- !private ["SQ", "isEmpty"]
- !private ["SQ", "left"]
- !private ["SQ", "makeExpression"]
- !private ["SQ", "makeIterator"]
- !private ["SQ", "mayChangeByFolding"]
- !private ["SQ", "none"]
- !private ["SQ", "normalizeExpression"]
- !private ["SQ", "operatorToken"]
- !private ["SQ", "peekNextOperator"]
- !private ["SQ", "precedenceGroup"]
- !private ["SQ", "precondition"]
- !private ["SQ", "preconditionFailure"]
- !private ["SQ", "reduce"]
- !private ["SQ", "rhsExpr"]
- !private ["SQ", "right"]
- !private ["SQ", "secondChoice"]
- !private ["SQ", "startIndex"]
- !private ["SQ", "subscript"]
- !private ["SQ", "ternary"]
- !private ["SQ", "text"]
- !private ["SQ", "withConditionExpression"]
- !private ["SQ", "withExpression"]
- !private ["SQ", "withSecondChoice"]
- !private ["11SwiftSyntax08ExprListB0V", "contains"]
- !private ["11SwiftSyntax08ExprListB0V", "count"]
- !private ["11SwiftSyntax08ExprListB0V", "first"]
- !private ["11SwiftSyntax08ExprListB0V", "makeIterator"]
- !private ["11SwiftSyntax08ExprListB0V", "reduce"]
- !private ["11SwiftSyntax04ExprB0V", "as"]
- !private ["11SwiftSyntax04ExprB0V", "init"]
- !private ["11SwiftSyntax04ExprB0V", "is"]
- !private ["11SwiftSyntax04ExprB8ProtocolP", "AsExprSyntax"]
- !private ["11SwiftSyntax04ExprB8ProtocolP", "ExprSyntax"]
- !private ["11SwiftSyntax04ExprB8ProtocolP", "IsExprSyntax"]
- !private ["11SwiftSyntax04ExprB8ProtocolP", "OperatorAndPrecedence"]
- !private ["11SwiftSyntax04ExprB8ProtocolP", "PrecedenceBound"]
- !private ["11SwiftSyntax04ExprB8ProtocolP", "Syntax"]
- !private ["11SwiftSyntax04ExprB8ProtocolP", "SyntaxEnum"]
- !private ["11SwiftSyntax04ExprB8ProtocolP", "SyntaxFactory"]
- !private ["11SwiftSyntax04ExprB8ProtocolP", "TernaryExprSyntax"]
- !private ["11SwiftSyntax04ExprB8ProtocolP", "TryExprSyntax"]
- !private ["11SwiftSyntax04ExprB8ProtocolP", "as"]
- !private ["11SwiftSyntax04ExprB8ProtocolP", "assert"]
- !private ["11SwiftSyntax04ExprB8ProtocolP", "conditionExpression"]
- !private ["11SwiftSyntax04ExprB8ProtocolP", "elements"]
- !private ["11SwiftSyntax04ExprB8ProtocolP", "expression"]
- !private ["11SwiftSyntax04ExprB8ProtocolP", "foldSequence"]
- !private ["11SwiftSyntax04ExprB8ProtocolP", "init"]
- !private ["11SwiftSyntax04ExprB8ProtocolP", "is"]
- !private ["11SwiftSyntax04ExprB8ProtocolP", "makeExpression"]
- !private ["11SwiftSyntax04ExprB8ProtocolP", "mayChangeByFolding"]
- !private ["11SwiftSyntax04ExprB8ProtocolP", "normalizeExpression"]
- !private ["11SwiftSyntax04ExprB8ProtocolP", "operatorToken"]
- !private ["11SwiftSyntax04ExprB8ProtocolP", "peekNextOperator"]
- !private ["11SwiftSyntax04ExprB8ProtocolP", "precedenceGroup"]
- !private ["11SwiftSyntax04ExprB8ProtocolP", "precondition"]
- !private ["11SwiftSyntax04ExprB8ProtocolP", "preconditionFailure"]
- !private ["11SwiftSyntax04ExprB8ProtocolP", "rhsExpr"]
- !private ["11SwiftSyntax04ExprB8ProtocolP", "secondChoice"]
- !private ["11SwiftSyntax04ExprB8ProtocolP", "withConditionExpression"]
- !private ["11SwiftSyntax04ExprB8ProtocolP", "withExpression"]
- !private ["11SwiftSyntax04ExprB8ProtocolP", "withSecondChoice"]
- !private ["s25ExpressibleByArrayLiteralP", "append"]
- !private ["s25ExpressibleByArrayLiteralP", "count"]
- !private ["s25ExpressibleByArrayLiteralP", "dropFirst"]
- !private ["s25ExpressibleByArrayLiteralP", "first"]
- !private ["s25ExpressibleByArrayLiteralP", "index"]
- !private ["s25ExpressibleByArrayLiteralP", "isEmpty"]
- !private ["s25ExpressibleByArrayLiteralP", "startIndex"]
- !private ["s25ExpressibleByArrayLiteralP", "subscript"]
- !private ["s23ExpressibleByNilLiteralP", "left"]
- !private ["s23ExpressibleByNilLiteralP", "none"]
- !private ["s23ExpressibleByNilLiteralP", "right"]
- !private ["SH", "AsExprSyntax"]
- !private ["SH", "ExprSyntax"]
- !private ["SH", "IsExprSyntax"]
- !private ["SH", "OperatorAndPrecedence"]
- !private ["SH", "PrecedenceBound"]
- !private ["SH", "Syntax"]
- !private ["SH", "SyntaxEnum"]
- !private ["SH", "SyntaxFactory"]
- !private ["SH", "TernaryExprSyntax"]
- !private ["SH", "TryExprSyntax"]
- !private ["SH", "append"]
- !private ["SH", "as"]
- !private ["SH", "assert"]
- !private ["SH", "assignment"]
- !private ["SH", "casting"]
- !private ["SH", "conditionExpression"]
- !private ["SH", "contains"]
- !private ["SH", "count"]
- !private ["SH", "dropFirst"]
- !private ["SH", "elements"]
- !private ["SH", "expression"]
- !private ["SH", "first"]
- !private ["SH", "foldSequence"]
- !private ["SH", "functionArrow"]
- !private ["SH", "index"]
- !private ["SH", "init"]
- !private ["SH", "is"]
- !private ["SH", "isEmpty"]
- !private ["SH", "left"]
- !private ["SH", "makeExpression"]
- !private ["SH", "makeIterator"]
- !private ["SH", "mayChangeByFolding"]
- !private ["SH", "none"]
- !private ["SH", "normalizeExpression"]
- !private ["SH", "operatorToken"]
- !private ["SH", "peekNextOperator"]
- !private ["SH", "precedenceGroup"]
- !private ["SH", "precondition"]
- !private ["SH", "preconditionFailure"]
- !private ["SH", "reduce"]
- !private ["SH", "rhsExpr"]
- !private ["SH", "right"]
- !private ["SH", "secondChoice"]
- !private ["SH", "startIndex"]
- !private ["SH", "subscript"]
- !private ["SH", "ternary"]
- !private ["SH", "text"]
- !private ["SH", "withConditionExpression"]
- !private ["SH", "withExpression"]
- !private ["SH", "withSecondChoice"]
- !private ["22SwiftFormatPrettyPrint13InfixOperatorV", "precedenceGroup"]
- !private ["11SwiftSyntax08ExprListB0V8IteratorV", "next"]
- !private ["St", "next"]
- !private ["SM", "append"]
- !private ["SM", "count"]
- !private ["SM", "dropFirst"]
- !private ["SM", "first"]
- !private ["SM", "index"]
- !private ["SM", "isEmpty"]
- !private ["SM", "startIndex"]
- !private ["SM", "subscript"]
- !private ["10Foundation19MutableDataProtocolP", "append"]
- !private ["10Foundation19MutableDataProtocolP", "count"]
- !private ["10Foundation19MutableDataProtocolP", "subscript"]
- !private ["22SwiftFormatPrettyPrint15PrecedenceGroupC4NameV", "assignment"]
- !private ["22SwiftFormatPrettyPrint15PrecedenceGroupC4NameV", "casting"]
- !private ["22SwiftFormatPrettyPrint15PrecedenceGroupC4NameV", "functionArrow"]
- !private ["22SwiftFormatPrettyPrint15PrecedenceGroupC4NameV", "ternary"]
- !private ["22SwiftFormatPrettyPrint15OperatorContextC", "associativityBetween"]
- !private ["22SwiftFormatPrettyPrint15OperatorContextC", "infixOperator"]
- !private ["22SwiftFormatPrettyPrint15OperatorContextC", "precedenceGroup"]
- !private ["Sq", "left"]
- !private ["Sq", "none"]
- !private ["Sq", "right"]
- !private ["Sk", "append"]
- !private ["Sk", "count"]
- !private ["Sk", "dropFirst"]
- !private ["Sk", "first"]
- !private ["Sk", "index"]
- !private ["Sk", "isEmpty"]
- !private ["Sk", "startIndex"]
- !private ["Sk", "subscript"]
- !private ["Sm", "append"]
- !private ["Sm", "count"]
- !private ["Sm", "dropFirst"]
- !private ["Sm", "first"]
- !private ["Sm", "index"]
- !private ["Sm", "isEmpty"]
- !private ["Sm", "startIndex"]
- !private ["Sm", "subscript"]
- !private ["SY", "assignment"]
- !private ["SY", "casting"]
- !private ["SY", "functionArrow"]
- !private ["SY", "ternary"]
- !private ["ST", "append"]
- !private ["ST", "contains"]
- !private ["ST", "count"]
- !private ["ST", "dropFirst"]
- !private ["ST", "first"]
- !private ["ST", "index"]
- !private ["ST", "isEmpty"]
- !private ["ST", "makeIterator"]
- !private ["ST", "reduce"]
- !private ["ST", "startIndex"]
- !private ["ST", "subscript"]
- ["11SwiftSyntax012SequenceExprB0V", "ArraySlice"]
- !private ["11SwiftSyntax012SequenceExprB0V", "AsExprSyntax"]
- !private ["11SwiftSyntax012SequenceExprB0V", "Associativity"]
- ["11SwiftSyntax012SequenceExprB0V", "Bool"]
- ["11SwiftSyntax012SequenceExprB0V", "ExprSyntax"]
- !private ["11SwiftSyntax012SequenceExprB0V", "IsExprSyntax"]
- ["11SwiftSyntax012SequenceExprB0V", "OperatorAndPrecedence"]
- ["11SwiftSyntax012SequenceExprB0V", "OperatorContext"]
- !private ["11SwiftSyntax012SequenceExprB0V", "PrecedenceBound"]
- ["11SwiftSyntax012SequenceExprB0V", "PrecedenceGroup"]
- !private ["11SwiftSyntax012SequenceExprB0V", "Syntax"]
- !private ["11SwiftSyntax012SequenceExprB0V", "SyntaxEnum"]
- !private ["11SwiftSyntax012SequenceExprB0V", "SyntaxFactory"]
- !private ["11SwiftSyntax012SequenceExprB0V", "TernaryExprSyntax"]
- !private ["11SwiftSyntax012SequenceExprB0V", "TryExprSyntax"]
- !private ["11SwiftSyntax012SequenceExprB0V", "assert"]
- !private ["11SwiftSyntax012SequenceExprB0V", "elements"]
- !private ["11SwiftSyntax012SequenceExprB0V", "foldSequence"]
- ["11SwiftSyntax012SequenceExprB0V", "folded"]
- !private ["11SwiftSyntax012SequenceExprB0V", "makeExpression"]
- !private ["11SwiftSyntax012SequenceExprB0V", "mayChangeByFolding"]
- !private ["11SwiftSyntax012SequenceExprB0V", "normalizeExpression"]
- !private ["11SwiftSyntax012SequenceExprB0V", "peekNextOperator"]
- !private ["11SwiftSyntax012SequenceExprB0V", "precedenceGroup"]
- !private ["11SwiftSyntax012SequenceExprB0V", "precondition"]
- !private ["11SwiftSyntax012SequenceExprB0V", "preconditionFailure"]
- !private ["11SwiftSyntax012SequenceExprB0V", "rhsExpr"]
- !private ["11SwiftSyntax0B0V", "as"]
- !private ["11SwiftSyntax0B0V", "init"]
- !private ["11SwiftSyntax0B10CollectionP", "contains"]
- !private ["11SwiftSyntax0B10CollectionP", "count"]
- !private ["11SwiftSyntax0B10CollectionP", "first"]
- !private ["11SwiftSyntax0B10CollectionP", "makeIterator"]
- !private ["11SwiftSyntax0B10CollectionP", "reduce"]
- ["11SwiftSyntax0B4EnumO", "arrowExpr"]
- ["11SwiftSyntax0B4EnumO", "asExpr"]
- ["11SwiftSyntax0B4EnumO", "assignmentExpr"]
- ["11SwiftSyntax0B4EnumO", "binaryOperatorExpr"]
- ["11SwiftSyntax0B4EnumO", "isExpr"]
- ["11SwiftSyntax0B4EnumO", "ternaryExpr"]
- !private ["11SwiftSyntax0B7FactoryO", "makeExprList"]
- !private ["11SwiftSyntax0B7FactoryO", "makeSequenceExpr"]
- !private ["11SwiftSyntax0B8HashableP", "AsExprSyntax"]
- !private ["11SwiftSyntax0B8HashableP", "ExprSyntax"]
- !private ["11SwiftSyntax0B8HashableP", "IsExprSyntax"]
- !private ["11SwiftSyntax0B8HashableP", "OperatorAndPrecedence"]
- !private ["11SwiftSyntax0B8HashableP", "PrecedenceBound"]
- !private ["11SwiftSyntax0B8HashableP", "Syntax"]
- !private ["11SwiftSyntax0B8HashableP", "SyntaxEnum"]
- !private ["11SwiftSyntax0B8HashableP", "SyntaxFactory"]
- !private ["11SwiftSyntax0B8HashableP", "TernaryExprSyntax"]
- !private ["11SwiftSyntax0B8HashableP", "TryExprSyntax"]
- !private ["11SwiftSyntax0B8HashableP", "as"]
- !private ["11SwiftSyntax0B8HashableP", "assert"]
- !private ["11SwiftSyntax0B8HashableP", "conditionExpression"]
- !private ["11SwiftSyntax0B8HashableP", "contains"]
- !private ["11SwiftSyntax0B8HashableP", "count"]
- !private ["11SwiftSyntax0B8HashableP", "elements"]
- !private ["11SwiftSyntax0B8HashableP", "expression"]
- !private ["11SwiftSyntax0B8HashableP", "first"]
- !private ["11SwiftSyntax0B8HashableP", "foldSequence"]
- !private ["11SwiftSyntax0B8HashableP", "init"]
- !private ["11SwiftSyntax0B8HashableP", "is"]
- !private ["11SwiftSyntax0B8HashableP", "makeExpression"]
- !private ["11SwiftSyntax0B8HashableP", "makeIterator"]
- !private ["11SwiftSyntax0B8HashableP", "mayChangeByFolding"]
- !private ["11SwiftSyntax0B8HashableP", "normalizeExpression"]
- !private ["11SwiftSyntax0B8HashableP", "operatorToken"]
- !private ["11SwiftSyntax0B8HashableP", "peekNextOperator"]
- !private ["11SwiftSyntax0B8HashableP", "precedenceGroup"]
- !private ["11SwiftSyntax0B8HashableP", "precondition"]
- !private ["11SwiftSyntax0B8HashableP", "preconditionFailure"]
- !private ["11SwiftSyntax0B8HashableP", "reduce"]
- !private ["11SwiftSyntax0B8HashableP", "rhsExpr"]
- !private ["11SwiftSyntax0B8HashableP", "secondChoice"]
- !private ["11SwiftSyntax0B8HashableP", "text"]
- !private ["11SwiftSyntax0B8HashableP", "withConditionExpression"]
- !private ["11SwiftSyntax0B8HashableP", "withExpression"]
- !private ["11SwiftSyntax0B8HashableP", "withSecondChoice"]
- !private ["11SwiftSyntax0B8ProtocolP", "AsExprSyntax"]
- !private ["11SwiftSyntax0B8ProtocolP", "ExprSyntax"]
- !private ["11SwiftSyntax0B8ProtocolP", "IsExprSyntax"]
- !private ["11SwiftSyntax0B8ProtocolP", "OperatorAndPrecedence"]
- !private ["11SwiftSyntax0B8ProtocolP", "PrecedenceBound"]
- !private ["11SwiftSyntax0B8ProtocolP", "Syntax"]
- !private ["11SwiftSyntax0B8ProtocolP", "SyntaxEnum"]
- !private ["11SwiftSyntax0B8ProtocolP", "SyntaxFactory"]
- !private ["11SwiftSyntax0B8ProtocolP", "TernaryExprSyntax"]
- !private ["11SwiftSyntax0B8ProtocolP", "TryExprSyntax"]
- !private ["11SwiftSyntax0B8ProtocolP", "as"]
- !private ["11SwiftSyntax0B8ProtocolP", "assert"]
- !private ["11SwiftSyntax0B8ProtocolP", "conditionExpression"]
- !private ["11SwiftSyntax0B8ProtocolP", "contains"]
- !private ["11SwiftSyntax0B8ProtocolP", "count"]
- !private ["11SwiftSyntax0B8ProtocolP", "elements"]
- !private ["11SwiftSyntax0B8ProtocolP", "expression"]
- !private ["11SwiftSyntax0B8ProtocolP", "first"]
- !private ["11SwiftSyntax0B8ProtocolP", "foldSequence"]
- !private ["11SwiftSyntax0B8ProtocolP", "init"]
- !private ["11SwiftSyntax0B8ProtocolP", "is"]
- !private ["11SwiftSyntax0B8ProtocolP", "makeExpression"]
- !private ["11SwiftSyntax0B8ProtocolP", "makeIterator"]
- !private ["11SwiftSyntax0B8ProtocolP", "mayChangeByFolding"]
- !private ["11SwiftSyntax0B8ProtocolP", "normalizeExpression"]
- !private ["11SwiftSyntax0B8ProtocolP", "operatorToken"]
- !private ["11SwiftSyntax0B8ProtocolP", "peekNextOperator"]
- !private ["11SwiftSyntax0B8ProtocolP", "precedenceGroup"]
- !private ["11SwiftSyntax0B8ProtocolP", "precondition"]
- !private ["11SwiftSyntax0B8ProtocolP", "preconditionFailure"]
- !private ["11SwiftSyntax0B8ProtocolP", "reduce"]
- !private ["11SwiftSyntax0B8ProtocolP", "rhsExpr"]
- !private ["11SwiftSyntax0B8ProtocolP", "secondChoice"]
- !private ["11SwiftSyntax0B8ProtocolP", "text"]
- !private ["11SwiftSyntax0B8ProtocolP", "withConditionExpression"]
- !private ["11SwiftSyntax0B8ProtocolP", "withExpression"]
- !private ["11SwiftSyntax0B8ProtocolP", "withSecondChoice"]
- !private ["11SwiftSyntax011TernaryExprB0V", "conditionExpression"]
- !private ["11SwiftSyntax011TernaryExprB0V", "secondChoice"]
- !private ["11SwiftSyntax011TernaryExprB0V", "withConditionExpression"]
- !private ["11SwiftSyntax011TernaryExprB0V", "withSecondChoice"]
- !private ["s20TextOutputStreamableP", "AsExprSyntax"]
- !private ["s20TextOutputStreamableP", "ExprSyntax"]
- !private ["s20TextOutputStreamableP", "IsExprSyntax"]
- !private ["s20TextOutputStreamableP", "OperatorAndPrecedence"]
- !private ["s20TextOutputStreamableP", "PrecedenceBound"]
- !private ["s20TextOutputStreamableP", "Syntax"]
- !private ["s20TextOutputStreamableP", "SyntaxEnum"]
- !private ["s20TextOutputStreamableP", "SyntaxFactory"]
- !private ["s20TextOutputStreamableP", "TernaryExprSyntax"]
- !private ["s20TextOutputStreamableP", "TryExprSyntax"]
- !private ["s20TextOutputStreamableP", "as"]
- !private ["s20TextOutputStreamableP", "assert"]
- !private ["s20TextOutputStreamableP", "conditionExpression"]
- !private ["s20TextOutputStreamableP", "contains"]
- !private ["s20TextOutputStreamableP", "count"]
- !private ["s20TextOutputStreamableP", "elements"]
- !private ["s20TextOutputStreamableP", "expression"]
- !private ["s20TextOutputStreamableP", "first"]
- !private ["s20TextOutputStreamableP", "foldSequence"]
- !private ["s20TextOutputStreamableP", "init"]
- !private ["s20TextOutputStreamableP", "is"]
- !private ["s20TextOutputStreamableP", "makeExpression"]
- !private ["s20TextOutputStreamableP", "makeIterator"]
- !private ["s20TextOutputStreamableP", "mayChangeByFolding"]
- !private ["s20TextOutputStreamableP", "normalizeExpression"]
- !private ["s20TextOutputStreamableP", "operatorToken"]
- !private ["s20TextOutputStreamableP", "peekNextOperator"]
- !private ["s20TextOutputStreamableP", "precedenceGroup"]
- !private ["s20TextOutputStreamableP", "precondition"]
- !private ["s20TextOutputStreamableP", "preconditionFailure"]
- !private ["s20TextOutputStreamableP", "reduce"]
- !private ["s20TextOutputStreamableP", "rhsExpr"]
- !private ["s20TextOutputStreamableP", "secondChoice"]
- !private ["s20TextOutputStreamableP", "text"]
- !private ["s20TextOutputStreamableP", "withConditionExpression"]
- !private ["s20TextOutputStreamableP", "withExpression"]
- !private ["s20TextOutputStreamableP", "withSecondChoice"]
- !private ["11SwiftSyntax05TokenB0V", "text"]
- !private ["11SwiftSyntax07TryExprB0V", "expression"]
- !private ["11SwiftSyntax07TryExprB0V", "withExpression"]
- !private ["s14_ArrayProtocolP", "append"]
- !private ["s14_ArrayProtocolP", "count"]
- !private ["s14_ArrayProtocolP", "dropFirst"]
- !private ["s14_ArrayProtocolP", "first"]
- !private ["s14_ArrayProtocolP", "index"]
- !private ["s14_ArrayProtocolP", "isEmpty"]
- !private ["s14_ArrayProtocolP", "startIndex"]
- !private ["s14_ArrayProtocolP", "subscript"]
- !private ["s24_DestructorSafeContainerP", "append"]
- !private ["s24_DestructorSafeContainerP", "count"]
- !private ["s24_DestructorSafeContainerP", "dropFirst"]
- !private ["s24_DestructorSafeContainerP", "first"]
- !private ["s24_DestructorSafeContainerP", "index"]
- !private ["s24_DestructorSafeContainerP", "isEmpty"]
- !private ["s24_DestructorSafeContainerP", "startIndex"]
- !private ["s24_DestructorSafeContainerP", "subscript"]
- !private ["s19_HasContiguousBytesP", "append"]
- !private ["s19_HasContiguousBytesP", "count"]
- !private ["s19_HasContiguousBytesP", "subscript"]
- !private ["s35_HasCustomAnyHashableRepresentationP", "append"]
- !private ["s35_HasCustomAnyHashableRepresentationP", "count"]
- !private ["s35_HasCustomAnyHashableRepresentationP", "subscript"]
- !private ["s21_ObjectiveCBridgeableP", "append"]
- !private ["s21_ObjectiveCBridgeableP", "count"]
- !private ["s21_ObjectiveCBridgeableP", "left"]
- !private ["s21_ObjectiveCBridgeableP", "none"]
- !private ["s21_ObjectiveCBridgeableP", "right"]
- !private ["s21_ObjectiveCBridgeableP", "subscript"]
- !private ["s26_OptionalNilComparisonTypeV", "left"]
- !private ["s26_OptionalNilComparisonTypeV", "none"]
- !private ["s26_OptionalNilComparisonTypeV", "right"]
depends-nominal:
- !private "Sa"
- !private "s10ArraySliceV"
- !private "22SwiftFormatPrettyPrint13AssociativityO"
- !private "SK"
- !private "11SwiftSyntax018BinaryOperatorExprB0V"
- !private "s7CVarArgP"
- !private "Sl"
- !private "10Foundation15ContiguousBytesP"
- !private "s28CustomDebugStringConvertibleP"
- !private "s17CustomReflectableP"
- !private "s23CustomStringConvertibleP"
- !private "10Foundation12DataProtocolP"
- !private "Se"
- !private "SE"
- !private "SQ"
- !private "11SwiftSyntax08ExprListB0V"
- !private "11SwiftSyntax04ExprB0V"
- !private "11SwiftSyntax04ExprB8ProtocolP"
- !private "s25ExpressibleByArrayLiteralP"
- !private "s23ExpressibleByNilLiteralP"
- !private "SH"
- !private "22SwiftFormatPrettyPrint13InfixOperatorV"
- !private "11SwiftSyntax08ExprListB0V8IteratorV"
- !private "St"
- !private "SM"
- !private "10Foundation19MutableDataProtocolP"
- !private "22SwiftFormatPrettyPrint15PrecedenceGroupC4NameV"
- !private "22SwiftFormatPrettyPrint15OperatorContextC"
- !private "Sq"
- !private "Sk"
- !private "Sm"
- !private "SY"
- !private "ST"
- "11SwiftSyntax012SequenceExprB0V"
- !private "11SwiftSyntax0B0V"
- !private "11SwiftSyntax0B10CollectionP"
- "11SwiftSyntax0B4EnumO"
- !private "11SwiftSyntax0B7FactoryO"
- !private "11SwiftSyntax0B8HashableP"
- !private "11SwiftSyntax0B8ProtocolP"
- !private "11SwiftSyntax011TernaryExprB0V"
- !private "s20TextOutputStreamableP"
- !private "11SwiftSyntax05TokenB0V"
- !private "11SwiftSyntax07TryExprB0V"
- !private "s14_ArrayProtocolP"
- !private "s24_DestructorSafeContainerP"
- !private "s19_HasContiguousBytesP"
- !private "s35_HasCustomAnyHashableRepresentationP"
- !private "s21_ObjectiveCBridgeableP"
- !private "s26_OptionalNilComparisonTypeV"
depends-dynamic-lookup:
depends-external:
- "/Users/rorybain/projects/swift-format/.build/x86_64-apple-macosx/debug/SwiftFormatCore.swiftmodule"
- "/Users/rorybain/projects/swift-format/.build/x86_64-apple-macosx/debug/SwiftFormatConfiguration.swiftmodule"
- "/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/swift/macosx/prebuilt-modules/XPC.swiftmodule/x86_64-apple-macos.swiftmodule"
- "/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/swift/macosx/prebuilt-modules/ObjectiveC.swiftmodule/x86_64-apple-macos.swiftmodule"
- "/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/swift/macosx/prebuilt-modules/Combine.swiftmodule/x86_64-apple-macos.swiftmodule"
- "/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/swift/macosx/prebuilt-modules/Dispatch.swiftmodule/x86_64-apple-macos.swiftmodule"
- "/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/swift/macosx/prebuilt-modules/Darwin.swiftmodule/x86_64-apple-macos.swiftmodule"
- "/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/swift/macosx/prebuilt-modules/Foundation.swiftmodule/x86_64-apple-macos.swiftmodule"
- "/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/swift/macosx/prebuilt-modules/CoreFoundation.swiftmodule/x86_64-apple-macos.swiftmodule"
- "/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/swift/macosx/prebuilt-modules/CoreGraphics.swiftmodule/x86_64-apple-macos.swiftmodule"
- "/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/swift/macosx/prebuilt-modules/Swift.swiftmodule/x86_64-apple-macos.swiftmodule"
- "/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/swift/macosx/prebuilt-modules/IOKit.swiftmodule/x86_64-apple-macos.swiftmodule"
- "/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/swift/macosx/prebuilt-modules/SwiftOnoneSupport.swiftmodule/x86_64-apple-macos.swiftmodule"
- "/Users/rorybain/projects/swift-format/.build/x86_64-apple-macosx/debug/SwiftSyntax.swiftmodule"
- "/Users/rorybain/projects/swift-format/.build/x86_64-apple-macosx/debug/SwiftFormatCore.build/module.modulemap"
- "/Users/rorybain/projects/swift-format/.build/x86_64-apple-macosx/debug/SwiftFormatConfiguration.build/module.modulemap"
- "/Users/rorybain/projects/swift-format/.build/x86_64-apple-macosx/debug/SwiftSyntaxBuilder.build/module.modulemap"
- "/Users/rorybain/projects/swift-format/.build/x86_64-apple-macosx/debug/ArgumentParser.build/module.modulemap"
- "/Users/rorybain/projects/swift-format/.build/x86_64-apple-macosx/debug/SwiftFormatWhitespaceLinter.build/module.modulemap"
- "/Users/rorybain/projects/swift-format/.build/x86_64-apple-macosx/debug/SwiftFormatRules.build/module.modulemap"
- "/Users/rorybain/projects/swift-format/.build/x86_64-apple-macosx/debug/SwiftFormat.build/module.modulemap"
- "/Users/rorybain/projects/swift-format/.build/x86_64-apple-macosx/debug/SwiftFormatPrettyPrint.build/module.modulemap"
- "/Users/rorybain/projects/swift-format/.build/x86_64-apple-macosx/debug/SwiftFormatTestSupport.build/module.modulemap"
- "/Users/rorybain/projects/swift-format/.build/x86_64-apple-macosx/debug/SwiftSyntax.build/module.modulemap"
- "/Users/rorybain/projects/swift-format/.build/x86_64-apple-macosx/debug/_CSwiftSyntax.build/module.modulemap"
- "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.15.sdk/usr/include/xpc/XPC.apinotes"
- "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.15.sdk/usr/include/objc/ObjectiveC.apinotes"
- "/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/swift/apinotes/Dispatch.apinotes"
- "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.15.sdk/usr/include/Darwin.apinotes"
- "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.15.sdk/System/Library/Frameworks/Foundation.framework/Headers/Foundation.apinotes"
- "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.15.sdk/System/Library/Frameworks/CoreGraphics.framework/Headers/CoreGraphics.apinotes"
- "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.15.sdk/System/Library/Frameworks/ApplicationServices.framework/Headers/ApplicationServices.apinotes"
- "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.15.sdk/System/Library/Frameworks/CoreText.framework/Headers/CoreText.apinotes"
- "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.15.sdk/System/Library/Frameworks/Security.framework/Headers/Security.apinotes"
interface-hash: "7ddcf9699ad2e34e9ce10d0a030971d5"
